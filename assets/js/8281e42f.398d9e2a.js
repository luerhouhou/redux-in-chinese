"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2406],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return m}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=d(a),m=o,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return a?n.createElement(h,s(s({ref:t},c),{},{components:a})):n.createElement(h,s({ref:t},c))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,s=new Array(i);s[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:o,s[1]=r;for(var d=2;d<i;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5778:function(e,t,a){a.d(t,{s:function(){return o}});var n=a(7294),o=function(e){var t=e.children,a=e.title,o=void 0===a?"Detailed Explanation":a;return n.createElement("details",{className:"detailed-explanation"},n.createElement("summary",null,n.createElement("h4",null,o)),t)}},5870:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var n=a(7462),o=a(3366),i=(a(7294),a(3905)),s=a(5778),r=["components"],l={id:"style-guide",title:"\u98ce\u683c\u5f15\u5bfc",description:"Redux\u98ce\u683c\u5f15\u5bfc\uff1aRedux\u7684\u63a8\u8350\u4f7f\u7528\u65b9\u6cd5\u548c\u6700\u4f73\u5b9e\u8df5",hide_title:!0,sidebar_label:"\u98ce\u683c\u5f15\u5bfc: \u6700\u4f73\u5b9e\u8df5"},d=void 0,c={unversionedId:"style-guide/style-guide",id:"style-guide/style-guide",title:"\u98ce\u683c\u5f15\u5bfc",description:"Redux\u98ce\u683c\u5f15\u5bfc\uff1aRedux\u7684\u63a8\u8350\u4f7f\u7528\u65b9\u6cd5\u548c\u6700\u4f73\u5b9e\u8df5",source:"@site/../docs/style-guide/style-guide.md",sourceDirName:"style-guide",slug:"/style-guide/",permalink:"/style-guide/",draft:!1,tags:[],version:"current",frontMatter:{id:"style-guide",title:"\u98ce\u683c\u5f15\u5bfc",description:"Redux\u98ce\u683c\u5f15\u5bfc\uff1aRedux\u7684\u63a8\u8350\u4f7f\u7528\u65b9\u6cd5\u548c\u6700\u4f73\u5b9e\u8df5",hide_title:!0,sidebar_label:"\u98ce\u683c\u5f15\u5bfc: \u6700\u4f73\u5b9e\u8df5"},sidebar:"docs",previous:{title:"Miscellaneous",permalink:"/faq/miscellaneous"},next:{title:"API \u53c2\u8003",permalink:"/api/api-reference"}},p={},u=[{value:"\u5f15\u8a00",id:"\u5f15\u8a00",level:2},{value:"\u89c4\u5219\u5206\u7c7b",id:"\u89c4\u5219\u5206\u7c7b",level:2},{value:"\u4f18\u5148\u7ea7 A\uff1a\u5fc5\u8981",id:"\u4f18\u5148\u7ea7-a\u5fc5\u8981",level:3},{value:"\u4f18\u5148\u7ea7 B\uff1a\u5f3a\u70c8\u63a8\u8350",id:"\u4f18\u5148\u7ea7-b\u5f3a\u70c8\u63a8\u8350",level:3},{value:"\u4f18\u5148\u7ea7 C\uff1a\u63a8\u8350",id:"\u4f18\u5148\u7ea7-c\u63a8\u8350",level:3},{value:"A \u7ea7\u4f18\u5148\u89c4\u5219: \u5fc5\u8981",id:"a-\u7ea7\u4f18\u5148\u89c4\u5219-\u5fc5\u8981",level:2},{value:"\u4e0d\u8981\u4fee\u6539 State",id:"\u4e0d\u8981\u4fee\u6539-state",level:3},{value:"Reducers \u4e0d\u80fd\u4ea7\u751f\u526f\u4f5c\u7528",id:"reducers-\u4e0d\u80fd\u4ea7\u751f\u526f\u4f5c\u7528",level:3},{value:"\u4e0d\u8981\u628a\u4e0d\u53ef\u5e8f\u5217\u5316\u7684\u503c\u653e\u8fdb State \u6216 Action",id:"\u4e0d\u8981\u628a\u4e0d\u53ef\u5e8f\u5217\u5316\u7684\u503c\u653e\u8fdb-state-\u6216-action",level:3},{value:"\u4e00\u4e2a\u5e94\u7528\u53ea\u6709\u4e00\u4e2a Redux Store",id:"\u4e00\u4e2a\u5e94\u7528\u53ea\u6709\u4e00\u4e2a-redux-store",level:3},{value:"A \u7ea7\u4f18\u5148\u89c4\u5219: \u5f3a\u70c8\u63a8\u8350",id:"a-\u7ea7\u4f18\u5148\u89c4\u5219-\u5f3a\u70c8\u63a8\u8350",level:2},{value:"\u5728\u5199 Redux \u903b\u8f91\u65f6\u4f7f\u7528 Redux Toolkit",id:"\u5728\u5199-redux-\u903b\u8f91\u65f6\u4f7f\u7528-redux-toolkit",level:3},{value:"\u4f7f\u7528 Immer \u505a Immutable \u66f4\u65b0",id:"\u4f7f\u7528-immer-\u505a-immutable-\u66f4\u65b0",level:3},{value:"\u5c06\u6587\u4ef6\u7ed3\u6784\u6784\u9020\u4e3a\u5177\u6709\u5355\u6587\u4ef6\u903b\u8f91\u7684\u529f\u80fd\u6027\u6587\u4ef6\u5939",id:"\u5c06\u6587\u4ef6\u7ed3\u6784\u6784\u9020\u4e3a\u5177\u6709\u5355\u6587\u4ef6\u903b\u8f91\u7684\u529f\u80fd\u6027\u6587\u4ef6\u5939",level:3},{value:"\u5c3d\u53ef\u80fd\u7684\u628a\u903b\u8f91\u653e\u8fdb Reducers",id:"\u5c3d\u53ef\u80fd\u7684\u628a\u903b\u8f91\u653e\u8fdb-reducers",level:3},{value:"Reducers \u5e94\u8be5\u62e5\u6709 State Shape",id:"reducers-\u5e94\u8be5\u62e5\u6709-state-shape",level:3},{value:"Name State Slices Based On the Stored Data",id:"name-state-slices-based-on-the-stored-data",level:3},{value:"Organize State Structure Based on Data Types, Not Components",id:"organize-state-structure-based-on-data-types-not-components",level:3},{value:"Treat Reducers as State Machines",id:"treat-reducers-as-state-machines",level:3},{value:"Normalize Complex Nested/Relational State",id:"normalize-complex-nestedrelational-state",level:3},{value:"Keep State Minimal and Derive Additional Values",id:"keep-state-minimal-and-derive-additional-values",level:3},{value:"Model Actions as Events, Not Setters",id:"model-actions-as-events-not-setters",level:3},{value:"Write Meaningful Action Names",id:"write-meaningful-action-names",level:3},{value:"Allow Many Reducers to Respond to the Same Action",id:"allow-many-reducers-to-respond-to-the-same-action",level:3},{value:"Avoid Dispatching Many Actions Sequentially",id:"avoid-dispatching-many-actions-sequentially",level:3},{value:"Evaluate Where Each Piece of State Should Live",id:"evaluate-where-each-piece-of-state-should-live",level:3},{value:"Use the React-Redux Hooks API",id:"use-the-react-redux-hooks-api",level:3},{value:"Connect More Components to Read Data from the Store",id:"connect-more-components-to-read-data-from-the-store",level:3},{value:"Use the Object Shorthand Form of <code>mapDispatch</code> with <code>connect</code>",id:"use-the-object-shorthand-form-of-mapdispatch-with-connect",level:3},{value:"Call <code>useSelector</code> Multiple Times in Function Components",id:"call-useselector-multiple-times-in-function-components",level:3},{value:"Use Static Typing",id:"use-static-typing",level:3},{value:"Use the Redux DevTools Extension for Debugging",id:"use-the-redux-devtools-extension-for-debugging",level:3},{value:"Use Plain JavaScript Objects for State",id:"use-plain-javascript-objects-for-state",level:3},{value:"Priority C Rules: Recommended",id:"priority-c-rules-recommended",level:2},{value:"Write Action Types as <code>domain/eventName</code>",id:"write-action-types-as-domaineventname",level:3},{value:"Write Actions Using the Flux Standard Action Convention",id:"write-actions-using-the-flux-standard-action-convention",level:3},{value:"Use Action Creators",id:"use-action-creators",level:3},{value:"Use Thunks for Async Logic",id:"use-thunks-for-async-logic",level:3},{value:"Move Complex Logic Outside Components",id:"move-complex-logic-outside-components",level:3},{value:"Use Selector Functions to Read from Store State",id:"use-selector-functions-to-read-from-store-state",level:3},{value:"Name Selector Functions as <code>selectThing</code>",id:"name-selector-functions-as-selectthing",level:3},{value:"Avoid Putting Form State In Redux",id:"avoid-putting-form-state-in-redux",level:3}],m={toc:u};function h(e){var t=e.components,a=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{class:"style-guide"},(0,i.kt)("h1",{id:"redux-\u98ce\u683c\u5f15\u5bfc"},"Redux \u98ce\u683c\u5f15\u5bfc"),(0,i.kt)("h2",{id:"\u5f15\u8a00"},"\u5f15\u8a00"),(0,i.kt)("p",null,"\u8fd9\u7bc7\u6587\u7ae0\u4e3a\u4f60\u7f16\u5199 Redux \u4ee3\u7801\u63d0\u4f9b\u5b98\u65b9\u7684\u98ce\u683c\u6307\u5bfc\u3002",(0,i.kt)("strong",{parentName:"p"},"\u5217\u51fa\u6211\u4eec\u63a8\u8350\u7684\u6a21\u5f0f, \u6700\u4f73\u5b9e\u8df5, \u4ee5\u53ca\u7f16\u5199 Redux \u5e94\u7528\u7684\u63a8\u8350\u65b9\u6cd5\u3002")),(0,i.kt)("p",null,"Redux \u6838\u5fc3\u5e93\u548c\u7edd\u5927\u591a\u6570\u7684 Redux \u6587\u6863\u90fd\u662f\u65e0\u89c2\u70b9\u7684\uff08unopinionated\uff09\u3002\u4f7f\u7528 Redux \u6709\u5f88\u591a\u79cd\u65b9\u6cd5\uff0c\u800c\u4e14\u5f88\u591a\u65f6\u5019\u6839\u672c\u5c31\u6ca1\u6709\u552f\u4e00\u201c\u6b63\u786e\u201d\u7684\u65b9\u6cd5\u3002"),(0,i.kt)("p",null,"\u7136\u800c\uff0c\u7ecf\u8fc7\u65f6\u95f4\u548c\u5b9e\u8df5\u7684\u8bc1\u660e\uff0c\u4e00\u4e9b\u65b9\u6cd5\u5c31\u662f\u6bd4\u5176\u4ed6\u7684\u65b9\u6cd5\u66f4\u4f18\u8d8a\u3002\u6b64\u5916\uff0c\u5f88\u591a\u5f00\u53d1\u8005\u4e5f\u8981\u6c42\u6211\u4eec\u63d0\u4f9b\u5b98\u65b9\u5f15\u5bfc\uff0c\u4ece\u800c\u51cf\u5c11\u51b3\u7b56\u7684\u75b2\u52b3\u3002"),(0,i.kt)("p",null,"\u57fa\u4e8e\u4ee5\u4e0a\u80cc\u666f, ",(0,i.kt)("strong",{parentName:"p"},"\u6211\u4eec\u5c06\u8fd9\u4e9b\u63a8\u8350\u5199\u6cd5\u90fd\u5217\u51fa\u6765\uff0c\u8ba9\u4f60\u907f\u514d\u51fa\u73b0\u9519\u8bef\u3001\u5c06\u7cbe\u529b\u653e\u5728\u975e\u4e1a\u52a1\u4ee3\u7801\u8eab\u4e0a\uff0c\u4ee5\u53ca\u907f\u514d\u4e0d\u6ee1\u8db3\u89c4\u8303\u7684\u4ee3\u7801"),"\u3002\u6211\u4eec\u4e5f\u77e5\u9053\u56e2\u961f\u7684\u7f16\u7801\u504f\u597d\u662f\u591a\u79cd\u591a\u6837\u7684\uff0c\u4e14\u4e0d\u540c\u7684\u9879\u76ee\u6709\u4e0d\u540c\u7684\u9700\u6c42\uff0c\u6839\u672c\u5c31\u6ca1\u6709\u4e00\u79cd\u98ce\u683c\u6307\u5bfc\u80fd\u6ee1\u8db3\u6240\u6709\u60c5\u51b5\u3002",(0,i.kt)("strong",{parentName:"p"},"\u6211\u4eec\u63a8\u8350\u4f60\u9075\u5faa\u8fd9\u4e9b\u63a8\u8350\uff0c\u4f46\u4f60\u4e5f\u9700\u8981\u8bc4\u4f30\u8fd9\u4e9b\u573a\u666f\u662f\u5426\u9002\u7528\u4e8e\u4f60\u7684\u9700\u6c42"),"\u3002"),(0,i.kt)("p",null,"\u6700\u540e\uff0c\u6211\u4eec\u611f\u8c22 Vue \u6587\u6863\u7684\u4f5c\u8005\uff0c\u56e0\u4e3a\u53d7\u5230",(0,i.kt)("a",{parentName:"p",href:"https://vuejs.org/v2/style-guide/"},"Vue Style Guide page"),"\u7684\u542f\u53d1\uff0c\u624d\u6709\u4e86\u6211\u4eec\u8fd9\u7bc7\u6587\u7ae0\u3002"),(0,i.kt)("h2",{id:"\u89c4\u5219\u5206\u7c7b"},"\u89c4\u5219\u5206\u7c7b"),(0,i.kt)("p",null,"\u6211\u4eec\u5c06\u89c4\u5219\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b\uff1a"),(0,i.kt)("h3",{id:"\u4f18\u5148\u7ea7-a\u5fc5\u8981"},"\u4f18\u5148\u7ea7 A\uff1a\u5fc5\u8981"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u8fd9\u4e00\u7ea7\u522b\u7684\u89c4\u5219\u53ef\u4ee5\u9632\u6b62\u9519\u8bef\uff0c\u6240\u4ee5\u8981\u4e0d\u8ba1\u6210\u672c\u5730\u9075\u5b88"),"\u3002\u4f8b\u5916\u60c5\u51b5\u53ef\u80fd\u5b58\u5728\uff0c\u4f46\u5e94\u8be5\u975e\u5e38\u7f55\u89c1\uff0c\u5e76\u4e14\u53ea\u80fd\u7531\u5177\u5907 JavaScript \u548c Redux \u4e13\u4e1a\u77e5\u8bc6\u7684\u5f00\u53d1\u8005\u4ea7\u751f\u3002"),(0,i.kt)("h3",{id:"\u4f18\u5148\u7ea7-b\u5f3a\u70c8\u63a8\u8350"},"\u4f18\u5148\u7ea7 B\uff1a\u5f3a\u70c8\u63a8\u8350"),(0,i.kt)("p",null,"\u8fd9\u4e9b\u89c4\u5219\u5728\u7edd\u5927\u591a\u6570\u7684\u9879\u76ee\u4e2d\u90fd\u63d0\u9ad8\u4e86\u4ee3\u7801\u53ef\u8bfb\u6027\u548c\u5f00\u53d1\u4f53\u9a8c\u3002\u5373\u4f7f\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5219\uff0c\u4ee3\u7801\u4ecd\u7136\u80fd\u8fd0\u884c\uff0c\u4f46\u4ec5\u80fd\u5728\u6781\u5c11\u6570\u60c5\u51b5\uff0c\u6709\u5f88\u6b63\u5f53\u7406\u7531\u7684\u65f6\u5019\u518d\u53bb\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5219\u3002",(0,i.kt)("strong",{parentName:"p"},"\u53ea\u8981\u5408\u7406\uff0c\u8bf7\u5c3d\u53ef\u80fd\u9075\u5b88\u8fd9\u4e9b\u89c4\u5219"),"\u3002"),(0,i.kt)("h3",{id:"\u4f18\u5148\u7ea7-c\u63a8\u8350"},"\u4f18\u5148\u7ea7 C\uff1a\u63a8\u8350"),(0,i.kt)("p",null,"\u4f60\u53ef\u4ee5\u9009\u62e9\u8fd9\u4e9b\u540c\u6837\u4f18\u79c0\u9009\u62e9\u4e2d\u7684\u4efb\u610f\u4e00\u79cd\u6765\u4fdd\u8bc1\u4e00\u81f4\u6027\u3002\u5728\u8fd9\u4e9b\u89c4\u5219\u4e2d\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u6211\u4eec\u4ecb\u7ecd\u4e86\u6bcf\u4e2a\u6bcf\u79cd\u89c4\u5219\u5e76\u63a8\u8350\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u9009\u9879"),"\u3002\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u5728\u4ee3\u7801\u5e93\u4e2d\u81ea\u7531\u5730\u505a\u51fa\u4e0d\u540c\u7684\u9009\u62e9\uff0c\u53ea\u8981\u4fdd\u6301\u4e00\u81f4\u6027\u5e76\u6709\u5145\u5206\u7684\u7406\u7531\u3002\u4f46\u662f\uff0c\u8bf7\u614e\u91cd\uff01"),(0,i.kt)("div",{class:"priority-rules priority-essential"},(0,i.kt)("h2",{id:"a-\u7ea7\u4f18\u5148\u89c4\u5219-\u5fc5\u8981"},"A \u7ea7\u4f18\u5148\u89c4\u5219: \u5fc5\u8981"),(0,i.kt)("h3",{id:"\u4e0d\u8981\u4fee\u6539-state"},"\u4e0d\u8981\u4fee\u6539 State"),(0,i.kt)("p",null,"\u4fee\u6539 state \u662f Redux \u5e94\u7528 bug \u7684\u6700\u5e38\u89c1\u7684\u8bf1\u56e0\uff0c\u5305\u62ec\u7ec4\u4ef6\u6ca1\u6709\u6b63\u786e\u518d\u6e32\u67d3\uff0c\u4e14\u963b\u6b62\u4e86 Redux DevTools \u7684\u65f6\u95f4\u7a7f\u68ad\u8c03\u8bd5\u3002\u65e0\u8bba\u662f reducers \u4e2d\u8fd8\u662f\u4efb\u610f\u5176\u4ed6\u5e94\u7528\u4ee3\u7801\u4e2d\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u90fd\u8981\u59cb\u7ec8\u907f\u514d state \u7684\u771f\u5b9e\u53d8\u6362"),"\u3002"),(0,i.kt)("p",null,"\u8bf7\u4f7f\u7528\u7c7b\u4f3c\u4e8e",(0,i.kt)("a",{parentName:"p",href:"https://github.com/leoasis/redux-immutable-state-invariant"},(0,i.kt)("inlineCode",{parentName:"a"},"redux-immutable-state-invariant"))," \u7684\u5de5\u5177\u5728\u5f00\u53d1\u4e2d\u6355\u83b7\uff0c\u5e76\u4f7f\u7528",(0,i.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/"},"Immer"),"\u5e93\u6765\u907f\u514d\u5076\u7136\u7684 state \u66f4\u65b0."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),"\uff1a\u4fee\u6539\u5df2\u6709\u503c\u7684 ",(0,i.kt)("em",{parentName:"p"},"\u526f\u672c"),' \u662f\u6ca1\u95ee\u9898\u7684\u2014\u2014\u8fd9\u662f\u4e00\u79cd\u6734\u7d20\u7684 immutable \u66f4\u65b0\u65b9\u5f0f\u3002 \u540c\u6837\u7684\uff0c \u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e86 Immer \u5e93\u505a immutable \u66f4\u65b0\uff0c \u7f16\u5199 "mutating" \u903b\u8f91\u4e5f\u662f\u5141\u8bb8\u7684\uff0c\u56e0\u4e3a\u771f\u5b9e\u7684\u6570\u636e\u6ca1\u6709\u88ab\u4fee\u6539\u2014\u2014 Immer \u5728\u5185\u90e8\u8fdb\u884c\u4e86\u5b89\u5168\u7684\u53d8\u5316\u8ffd\u8e2a\u5e76\u4e14\u751f\u6210\u4e86\u65b0\u7684 immutably \u503c\u3002')),(0,i.kt)("h3",{id:"reducers-\u4e0d\u80fd\u4ea7\u751f\u526f\u4f5c\u7528"},"Reducers \u4e0d\u80fd\u4ea7\u751f\u526f\u4f5c\u7528"),(0,i.kt)("p",null,"Reducer \u51fd\u6570\u5fc5\u987b",(0,i.kt)("em",{parentName:"p"},"\u53ea")," \u4f9d\u8d56\u4e8e ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"action")," \u53c2\u6570\uff0c\u4e14\u5fc5\u987b\u91cd\u65b0\u8ba1\u7b97\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 state\u3002",(0,i.kt)("strong",{parentName:"p"},"\u5176\u4e2d\u7981\u6b62\u6267\u884c\u4efb\u4f55\u5f02\u6b65\u4ee3\u7801\uff08AJAX \u8c03\u7528, timeouts, promises\uff09\uff0c\u751f\u6210\u968f\u673a\u503c \uff08",(0,i.kt)("inlineCode",{parentName:"strong"},"Date.now()"),", ",(0,i.kt)("inlineCode",{parentName:"strong"},"Math.random()"),"\uff0c\u5728 reducer \u5916\u9762\u4fee\u6539\u53d8\u91cf\uff0c\u6216\u8005\u6267\u884c\u4e00\u4e9b\u4fee\u6539 reducer \u51fd\u6570\u4f5c\u7528\u4e8e\u4e4b\u5916\u53d8\u91cf\u7684\u4ee3\u7801"),"\u3002"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"\u6ce8\u610f"),"\uff1a\u53ea\u8981\u7b26\u5408\u540c\u6837\u7684\u89c4\u5219\uff0c\u5728 reducer \u4e2d\u8c03\u7528\u5916\u90e8\u5b9a\u4e49\u7684\u4e00\u4e9b\u65b9\u6cd5\uff0c\u6bd4\u5982\u4ece\u5e93\u6216\u5de5\u5177\u7c7b\u4e2d import \u7684\u51fd\u6570\u7b49\uff0c\u4e5f\u662f\u53ef\u4ee5\u7684\u3002")),(0,i.kt)(s.s,{title:"\u8be6\u7ec6\u8bf4\u660e",mdxType:"DetailedExplanation"},(0,i.kt)("p",null,"\u6b64\u89c4\u5219\u7684\u76ee\u7684\u662f\u786e\u4fdd\u5728\u8c03\u7528\u65f6 reducers \u7684\u884c\u4e3a\u53ef\u9884\u6d4b\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6b63\u5728\u8fdb\u884c\u65f6\u95f4\u65c5\u884c\u8c03\u8bd5\uff0c\u5219\u53ef\u80fd\u4f1a\u591a\u6b21\u8c03\u7528 reducer \u51fd\u6570\uff0c\u5e76\u6839\u636e\u4e4b\u524d\u7684 actions \u751f\u6210\u201c\u5f53\u524d\u201d\u72b6\u6001\u503c\u3002\u5982\u679c reducer \u6709\u526f\u4f5c\u7528\uff0c\u8fd9\u5c06\u5bfc\u81f4\u5728\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u4e86\u8fd9\u4e9b\u526f\u4f5c\u7528\uff0c\u5e76\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u4ee5\u610f\u6599\u4e4b\u5916\u7684\u65b9\u5f0f\u8fd0\u884c\u3002"),(0,i.kt)("p",null,"\u8fd9\u6761\u89c4\u5219\u4e5f\u6709\u4e00\u4e9b\u7070\u8272\u5730\u5e26\u3002\u4e25\u683c\u6765\u8bf4\uff0c\u6709\u4e00\u4e9b\u4ee3\u7801\u4e5f\u662f\u526f\u4f5c\u7528\uff0c\u6bd4\u5982 ",(0,i.kt)("inlineCode",{parentName:"p"},"console.log(state)"),"\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5b83\u5bf9\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u5b9e\u8d28\u884c\u7684\u884c\u4e3a\u3002")),(0,i.kt)("h3",{id:"\u4e0d\u8981\u628a\u4e0d\u53ef\u5e8f\u5217\u5316\u7684\u503c\u653e\u8fdb-state-\u6216-action"},"\u4e0d\u8981\u628a\u4e0d\u53ef\u5e8f\u5217\u5316\u7684\u503c\u653e\u8fdb State \u6216 Action"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e0d\u8981\u628a\u4e0d\u53ef\u5e8f\u5217\u5316\u7684\u503c\u653e\u8fdb Redux store \u6216\u8005 dispatch \u7684 actions\uff0c\u6bd4\u5982 Promises\u3001Symbols\u3001Maps/Sets\u3001functions\u3001\u6216\u7c7b\u7684\u5b9e\u4f8b"),"\u3002\u8fd9\u4e00\u70b9\u4fdd\u8bc1 Redux DevTools \u6309\u7167\u9884\u671f\u65b9\u5f0f\u5de5\u4f5c\u3002\u4e5f\u4fdd\u8bc1 UI \u6309\u7167\u9884\u671f\u65b9\u5f0f\u66f4\u65b0\u3002"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"\u4f8b\u5916"),"\uff1a\u6709\u65f6\u4f60\u4e5f\u53ef\u4ee5\u5c06\u975e\u53ef\u5e8f\u5217\u5316\u6570\u636e\u653e\u8fdb action ",(0,i.kt)("em",{parentName:"p"},"\u5f53\u4e14\u4ec5\u5f53")," \u8be5 action \u5728\u4f20\u9012\u5230 reducer \u4e4b\u524d\u4f1a\u88ab Middleware \u62e6\u622a\u4f4f\u5e76\u4e0d\u7ee7\u7eed\u5411\u4e0b\u4f20\u9012\u3002",(0,i.kt)("inlineCode",{parentName:"p"},"redux-thunk")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"redux-promise")," \u5c31\u662f\u4e2a\u4f8b\u5b50\u3002")),(0,i.kt)("h3",{id:"\u4e00\u4e2a\u5e94\u7528\u53ea\u6709\u4e00\u4e2a-redux-store"},"\u4e00\u4e2a\u5e94\u7528\u53ea\u6709\u4e00\u4e2a Redux Store"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u4e00\u4e2a\u6807\u51c6\u7684 Redux \u5e94\u7528\u5e94\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a Store \u5b9e\u4f8b\uff08\u5355\u4f8b\uff09\uff0c\u4f9b\u6574\u4e2a\u5e94\u7528\u4f7f\u7528"),"\u3002\u5b83\u5e94\u8be5\u7528\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u6bd4\u5982",(0,i.kt)("inlineCode",{parentName:"p"},"store.js"),"\u5b9a\u4e49\u51fa\u6765\u3002"),(0,i.kt)("p",null,"\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u4e0d\u5e94\u8be5\u6709\u4efb\u610f\u4e00\u4e2a\u5e94\u7528\u903b\u8f91\u5c06\u5176\u76f4\u63a5\u5f15\u5165\u3002\u4ed6\u5e94\u8be5\u4f7f\u7528\u901a\u8fc7",(0,i.kt)("inlineCode",{parentName:"p"},"<Provider>")," \u4f20\u9012\u7ed9 React \u7ec4\u4ef6\u6811\uff0c\u6216\u901a\u8fc7 thunks \u8fd9\u6837\u7684 middlewares \u95f4\u63a5\u5f15\u7528\u3002\u5728\u6781\u5c11\u6570\u7684\u7528\u4f8b\u4e2d\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5c06\u5176\u5bfc\u5165\u5176\u4ed6\u903b\u8f91\u6587\u4ef6\uff0c\u4f46\u8fd9\u5e94\u8be5\u662f\u6ca1\u6709\u529e\u6cd5\u7684\u529e\u6cd5\u3002")),(0,i.kt)("div",{class:"priority-rules priority-stronglyrecommended"},(0,i.kt)("h2",{id:"a-\u7ea7\u4f18\u5148\u89c4\u5219-\u5f3a\u70c8\u63a8\u8350"},"A \u7ea7\u4f18\u5148\u89c4\u5219: \u5f3a\u70c8\u63a8\u8350"),(0,i.kt)("h3",{id:"\u5728\u5199-redux-\u903b\u8f91\u65f6\u4f7f\u7528-redux-toolkit"},"\u5728\u5199 Redux \u903b\u8f91\u65f6\u4f7f\u7528 Redux Toolkit"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/redux-toolkit/overview"},"Redux Toolkit")," \u662f\u6211\u4eec\u63a8\u8350\u7684 Redux \u5de5\u5177\u96c6"),"\u3002\u5b83\u56ca\u62ec\u4e86\u4e00\u4e9b\u5c01\u88c5\u53ef\u6211\u4eec\u6700\u4f73\u5b9e\u8df5\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u8bbe\u7f6e store \u4f7f\u5176\u80fd\u6355\u83b7 mutations \u5e76\u6fc0\u6d3b Redux DevTools \u62d3\u5c55\uff0c\u4f7f\u7528 Immer \u7b80\u5316 immutable \u66f4\u65b0\u7b49\u7b49\u3002"),(0,i.kt)("p",null,"\u5199 Redux \u7684\u65f6\u5019\u4e5f\u4e0d\u662f\u5fc5\u987b\u8981\u4f7f\u7528 RTK\uff0c\u5982\u679c\u613f\u610f\u7684\u8bdd\u4f60\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e9b\u5176\u4ed6\u7684\u65b9\u6cd5\uff0c\u4f46\u662f",(0,i.kt)("strong",{parentName:"p"},"\u4f7f\u7528 RTK \u4f1a\u7b80\u5316\u4ee3\u7801\u903b\u8f91\uff0c\u5e76\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u9075\u5faa\u597d\u7684 Redux \u9ed8\u8ba4\u884c\u4e3a"),"\u3002"),(0,i.kt)("h3",{id:"\u4f7f\u7528-immer-\u505a-immutable-\u66f4\u65b0"},"\u4f7f\u7528 Immer \u505a Immutable \u66f4\u65b0"),(0,i.kt)("p",null,"\u624b\u5199 immutable \u66f4\u65b0\u903b\u8f91\u901a\u5e38\u6bd4\u8f83\u590d\u6742\uff0c\u5374\u5bb9\u6613\u51fa\u9519\u3002",(0,i.kt)("a",{parentName:"p",href:"https://immerjs.github.io/immer/"},"Immer"),"\u5e93\u53ef\u4ee5\u8ba9\u4f60\u5199\u201c\u53ef\u53d8\u201d\u66f4\u65b0\u903b\u8f91\u6765\u7b80\u5316 immutable \u66f4\u65b0\uff0c\u5373\u4fbf\u5728\u5e94\u7528\u5f00\u53d1\u7684\u5176\u4ed6\u4efb\u610f\u5730\u65b9\u4e3a\u4e86\u6355\u6349 mutation \u800c freeze \u4e86 state\u3002"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u6211\u4eec\u5efa\u8bae\u4f7f\u7528 Immer \u7f16\u5199 immutable \u66f4\u65b0\u903b\u8f91\uff0c\u8fd9\u4e00\u70b9\u5df2\u7ecf\u4f5c\u4e3a\u4e86 ",(0,i.kt)("a",{parentName:"strong",href:"/redux-toolkit/overview"},"Redux Toolkit")," \u504f\u597d\u7684\u4e00\u90e8\u5206"),"\u3002"),(0,i.kt)("a",{id:"structure-files-as-feature-folders-or-ducks"}),(0,i.kt)("h3",{id:"\u5c06\u6587\u4ef6\u7ed3\u6784\u6784\u9020\u4e3a\u5177\u6709\u5355\u6587\u4ef6\u903b\u8f91\u7684\u529f\u80fd\u6027\u6587\u4ef6\u5939"},"\u5c06\u6587\u4ef6\u7ed3\u6784\u6784\u9020\u4e3a\u5177\u6709\u5355\u6587\u4ef6\u903b\u8f91\u7684\u529f\u80fd\u6027\u6587\u4ef6\u5939"),(0,i.kt)("p",null,"Redux \u672c\u8eab\u5e76\u4e0d\u5173\u5fc3\u5e94\u7528\u7684\u76ee\u5f55\u7ed3\u6784\u600e\u4e48\u7ec4\u7ec7\u3002\u4f46\u662f\uff0c\u6309\u7167\u4e00\u5b9a\u89c4\u5219\u5c06 Redux \u903b\u8f91\u6536\u5f52\u5230\u4e00\u5904\u4f7f\u5f97\u4ee3\u7801\u66f4\u53ef\u7ef4\u62a4\u3002"),(0,i.kt)("p",null,"\u6b63\u56e0\u5982\u6b64\uff0c",(0,i.kt)("strong",{parentName:"p"},"\u6211\u4eec\u5efa\u8bae\u5927\u591a\u6570\u7684\u5e94\u7528\u7a0b\u5e8f\u56e0\u8be5\u6309\u7167\u201c\u529f\u80fd\u6027\u6587\u4ef6\u5939\u201d\u7684\u65b9\u6cd5\u6765\u7ec4\u7ec7\u76ee\u5f55\u7ed3\u6784"),"\uff08\u5373\u5177\u6709\u7edf\u4e00\u529f\u80fd\u7684\u6587\u4ef6\u90fd\u5728\u4e00\u4e2a\u6587\u4ef6\u5939\u91cc\uff09\u3002\u7ed9\u5b9a\u4e00\u4e2a\u7279\u5b9a\u6587\u4ef6\u5939\uff0c",(0,i.kt)("strong",{parentName:"p"},'\u6709\u76f8\u5bf9\u5e94\u529f\u80fd\u7684 Redux \u903b\u8f91 \u90fd\u5e94\u8be5\u88ab\u5199\u8fdb\u5355\u72ec\u7684\u4e00\u4e2a "slice" \u6587\u4ef6'),"\uff0c\u63a8\u8350\u4f7f\u7528 Redux Toolkit \u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"createSlice")," API\u3002\uff08\u8fd9\u4e5f\u662f\u4fd7\u79f0\u7684 ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/erikras/ducks-modular-redux"},'"ducks" \u6a21\u5f0f'),'\uff09\u3002\u867d\u7136\u4e00\u4e9b\u8001\u7684 Redux \u4ee3\u7801\u5e93\u7ecf\u5e38\u4f7f\u7528\u4e00\u79cd "folder-by-type" \u65b9\u5f0f\uff0c\u5c06\u201cactions\u201d\u548c\u201creducers\u201d\u5206\u522b\u5199\u5230\u4e0d\u540c\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u4f46\u662f\u5c06\u76f8\u5173\u903b\u8f91\u90fd\u5f52\u5230\u4e00\u8d77\u4f7f\u5f97\u5b9a\u4f4d\u4ee3\u7801\u548c\u4fee\u6539\u4ee3\u7801\u53d8\u5f97\u66f4\u5bb9\u6613\u3002'),(0,i.kt)(s.s,{title:"\u8be6\u7ec6\u8bf4\u660e\uff1a\u76ee\u5f55\u7ed3\u6784\u7684\u793a\u4f8b",mdxType:"DetailedExplanation"},"\u4e00\u4e2a\u76ee\u5f55\u7ed3\u6784\u7684\u793a\u4f8b\uff0c\u5927\u6982\u957f\u8fd9\u6837\uff1a",(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/src"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index.tsx"),": React \u7ec4\u4ef6\u6811\u6e32\u67d3\u7684\u5165\u53e3\u6587\u4ef6"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/app"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"store.ts"),": store \u914d\u7f6e"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rootReducer.ts"),": \u6839 reducer (\u53ef\u9009)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"App.tsx"),": React \u6839\u7ec4\u4ef6"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/common"),": hooks\u3001\u901a\u7528\u7ec4\u4ef6\u3001\u5de5\u5177\u65b9\u6cd5\u7b49"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/features"),": \u5305\u542b\u6240\u6709\u7684\u201c\u529f\u80fd\u6027\u6587\u4ef6\u5939\u201d",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/todos"),": \u4f46\u4e2a\u529f\u80fd\u7684\u6587\u4ef6\u5939",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"todosSlice.ts"),": Redux reducer \u903b\u8f91\u548c\u76f8\u5173\u7684 action"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Todos.tsx"),": \u4e00\u4e2a React \u7ec4\u4ef6")))))))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"/app")," \u5305\u542b\u5e94\u7528\u7ea7\u522b\u7684\u4e00\u4e9b\u914d\u7f6e\u548c\u5e03\u5c40\u7b49\uff0c\u8fd9\u4e9b\u914d\u7f6e\u548c\u5e03\u5c40\u53d6\u51b3\u4e8e\u9879\u76ee\u4e2d\u7684\u5176\u4ed6\u6587\u4ef6\u5939"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"/common")," \u5305\u542b\u771f\u6b63\u901a\u7528\u548c\u53ef\u91cd\u7528\u7684\u5de5\u5177\u65b9\u6cd5\u548c\u7ec4\u4ef6"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"/features")," \u662f\u4e00\u4e2a\u5b58\u653e\u5305\u542b\u4e00\u4e2a\u7279\u5b9a\u529f\u80fd\u6240\u6709\u7684\u76f8\u5173\u65b9\u6cd5\u7684\u6587\u4ef6\u5939\u3002\u5728\u672c\u4f8b\u4e2d\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"todosSlice.ts"),' \u5c31\u662f\u4e00\u4e2a"duck" \u98ce\u683c\u7684\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u4e86 RTK \u7684 ',(0,i.kt)("inlineCode",{parentName:"p"},"createSlice()")," \u51fd\u6570\u7684\u8c03\u7528\uff0c\u5e76\u5bfc\u51fa\u4e86 slice reducer \u548c action creators\u3002")),(0,i.kt)("h3",{id:"\u5c3d\u53ef\u80fd\u7684\u628a\u903b\u8f91\u653e\u8fdb-reducers"},"\u5c3d\u53ef\u80fd\u7684\u628a\u903b\u8f91\u653e\u8fdb Reducers"),(0,i.kt)("p",null,"\u5c3d\u53ef\u80fd",(0,i.kt)("strong",{parentName:"p"},"\u8bd5\u7740\u5c06\u8ba1\u7b97\u65b0\u7684 state \u7684\u903b\u8f91\u4ee3\u7801\u5199\u8fdb\u5408\u9002\u7684 reducer\uff0c\u800c\u4e0d\u662f\u51c6\u5907\u6570\u636e\u5e76 dispatch action \u7684\u90a3\u6bb5\u4ee3\u7801\u4e2d"),"\uff08\u6bd4\u5982 click handler\uff09\u3002\u8fd9\u4e00\u70b9\u6709\u52a9\u4e8e\u786e\u4fdd\u66f4\u591a\u5b9e\u9645\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u6613\u4e8e\u6d4b\u8bd5\uff0c\u4f7f\u5f97\u65f6\u95f4\u65c5\u884c\u8c03\u8bd5\u66f4\u9ad8\u6548\uff0c\u66f4\u5e2e\u52a9\u907f\u514d\u5bfc\u81f4 mutation \u548c bug \u7684\u4e00\u822c\u6027\u9519\u8bef\u3002"),(0,i.kt)("p",null,"\u5b58\u5728\u4e00\u4e9b\u5408\u7406\u7684\u7528\u4f8b\uff0c\u65b0\u7684 state \u4e2d\u7684\u67d0\u4e9b\u6216\u5168\u90e8\u6570\u636e\u9700\u8981\u88ab\u9996\u5148\u8ba1\u7b97\uff08\u4f8b\u5982\u751f\u6210\u552f\u4e00\u7684 ID\uff09\uff0c\u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u7ef4\u6301\u5728\u4e00\u4e2a\u6700\u4f4e\u7684\u9650\u5ea6\u3002"),(0,i.kt)(s.s,{title:"\u8be6\u7ec6\u8bf4\u660e",mdxType:"DetailedExplanation"},(0,i.kt)("p",null,"Redux \u6838\u5fc3\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5173\u5fc3\u65b0\u7684 state \u662f\u5728 reducer \u4e2d\u8ba1\u7b97\u7684\u8fd8\u662f\u5728 action \u521b\u5efa\u903b\u8f91\u4e2d\u8ba1\u7b97\u7684\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e todo \u5e94\u7528\u7a0b\u5e8f\uff0c\u201c\u5207\u6362 todo \u72b6\u6001\u201d\u64cd\u4f5c\u7684\u903b\u8f91\u8981\u6c42 immutable \u66f4\u65b0 todo \u6570\u7ec4\u3002\u8ba9 action \u53ea\u643a\u5e26 todo ID \u5e76\u5728 reducer \u4e2d\u8ba1\u7b97\u65b0\u6570\u7ec4\u662f\u662f\u5408\u6cd5\u7684\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// Click handler:\nconst onTodoClicked = (id) => {\n    dispatch({type: "todos/toggleTodo", payload: {id}})\n}\n\n// Reducer:\ncase "todos/toggleTodo": {\n    return state.map(todo => {\n        if(todo.id !== action.payload.id) return todo;\n\n        return {...todo, completed: !todo.completed };\n    })\n}\n')),(0,i.kt)("p",null,"\u5e76\u4e14\uff0c\u9996\u5148\u8ba1\u7b97\u51fa\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff0c\u5e76\u5c06\u6574\u4e2a\u6570\u7ec4\u653e\u8fdb action \u4e2d\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// Click handler:\nconst onTodoClicked = id => {\n  const newTodos = todos.map(todo => {\n    if (todo.id !== id) return todo\n\n    return { ...todo, completed: !todo.completed }\n  })\n\n  dispatch({ type: 'todos/toggleTodo', payload: { todos: newTodos } })\n}\n\n// Reducer:\ncase \"todos/toggleTodo\":\n    return action.payload.todos;\n")),(0,i.kt)("p",null,"\u4f46\u662f\uff0c\u6211\u4eec\u63a8\u8350\u5728 reducer \u4e2d\u5b8c\u6210\u8fd9\u4e9b\u903b\u8f91\uff0c\u6709\u4ee5\u4e0b\u51e0\u70b9\u539f\u56e0\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u7531\u4e8e reducer \u90fd\u662f\u7eaf\u51fd\u6570\uff0c\u6240\u4ee5\u4ed6\u4eec\u66f4\u5bb9\u6613\u6d4b\u8bd5 \u2014\u2014 \u4f60\u53ea\u9700\u8981\u8c03\u7528 ",(0,i.kt)("inlineCode",{parentName:"li"},"const result = reducer(testState, action)"),"\uff0c\u5e76\u4e14\u65ad\u8a00\u4f60\u671f\u671b\u7684\u7ed3\u679c\u3002\u6240\u4ee5\uff0c\u5728 reducer \u4e2d\u6267\u884c\u7684\u903b\u8f91\u8d8a\u591a\uff0c\u53ef\u6d4b\u8bd5\u7684\u903b\u8f91\u5c31\u8d8a\u591a\u3002"),(0,i.kt)("li",{parentName:"ul"},"Redux state \u7684\u66f4\u65b0\u5fc5\u987b\u59cb\u7ec8\u9075\u5b88",(0,i.kt)("a",{parentName:"li",href:"/usage/structuring-reducers/immutable-update-patterns"},"immutable \u66f4\u65b0\u7684\u539f\u5219"),"\u3002\u5927\u591a\u6570\u7684 Redux \u4f7f\u7528\u8005\u90fd\u660e\u767d\u5728 reducer \u4e2d\u9075\u5faa\u8fd9\u4e9b\u89c4\u5219\uff0c\u4f46\u4e5f\u53ef\u80fd\u4e0d\u77e5\u9053\u5982\u679c\u8981\u5728 reducer \u7684 ",(0,i.kt)("em",{parentName:"li"},"\u5916\u90e8")," \u8ba1\u7b97\u51fa\u4e00\u4e2a\u65b0\u7684 state ",(0,i.kt)("em",{parentName:"li"},"\u4e5f")," \u5fc5\u987b\u8fd9\u4e48\u5e72\u3002\u8fd9\u6837\u5f88\u5bb9\u6613\u4ea7\u751f\u9519\u8bef\uff0c\u6bd4\u5982\u610f\u5916\u7684 mutation \u6216\u8005\u751a\u81f3\u4ece Redux store \u4e2d\u8bfb\u53d6\u4e00\u4e2a\u503c\u5e76\u5c06\u5176\u76f4\u63a5\u56de\u4f20\u5230 action \u4e2d\u3002\u5728 reducer \u4e2d\u6267\u884c\u6240\u6709\u7684 state \u8ba1\u7b97 \u80fd\u907f\u514d\u9020\u6210\u8fd9\u4e9b\u9519\u8bef\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528 Redux Toolkit \u6216 Immer \u5e93\uff0c\u90a3\u4e48\u5728 reducers \u7f16\u5199 immutable \u66f4\u65b0\u903b\u8f91 \u662f\u76f8\u5f53\u7b80\u5355\u7684\uff0c\u5e76\u4e14 Immer \u4f1a freeze \u6389 state \u4ece\u800c\u6355\u83b7\u610f\u5916\u7684 mutations \u9519\u8bef\u3002"),(0,i.kt)("li",{parentName:"ul"},'\u65f6\u95f4\u65c5\u884c\u8c03\u8bd5\u8ba9\u4f60\u53ef\u4ee5 "\u64a4\u9500" \u5df2\u7ecf\u88ab dispatch \u7684 action\uff0c\u4e14\u53ef\u4ee5 "\u91cd\u505a" dispatch action\u3002\u6b64\u5916\uff0creducers \u7684\u70ed\u91cd\u8f7d\u901a\u5e38\u6d89\u53ca\u5230\u4f7f\u7528\u65b0\u7684 reducer \u6765\u6267\u884c\u73b0\u6709\u7684 action\u3002 \u5982\u679c\u4f60\u7684 action \u6ca1\u95ee\u9898\u4f46\u662f reducer \u662f\u6709 bug \u7684\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539 recuder \u4fee\u590d bug\uff0c\u5e76\u70ed\u91cd\u8f7d\u8fd9\u4e2a reducer\uff0c\u4f60\u5c31\u80fd\u83b7\u5f97\u4e00\u4e2a\u6b63\u786e\u7684\u65b0 state\u3002\u5982\u679c action \u672c\u8eab\u51fa\u73b0\u9519\u8bef\uff0c\u4f60\u53ea\u9700\u8981\u91cd\u65b0\u6267\u884c\u4ea7\u751f\u9519\u8bef\u7684\u90a3\u4e00\u6b65\u7684 action\u3002\u6240\u4ee5\uff0c\u5c06\u66f4\u591a\u7684\u903b\u8f91\u653e\u8fdb reducer \u540e\uff0c\u8c03\u8bd5\u4e5f\u53d8\u65b9\u4fbf\u4e86\u3002'),(0,i.kt)("li",{parentName:"ul"},"\u6700\u540e\uff0c\u628a\u66f4\u65b0\u6570\u636e\u7684\u903b\u8f91\u653e\u8fdb reducers \u800c\u4e0d\u662f\u8ba9\u5b83\u4eec\u968f\u673a\u6563\u843d\u5728\u5e94\u7528\u4ee3\u7801\u7684\u5176\u4ed6\u5730\u65b9\u610f\u5473\u7740\u4f60\u66f4\u65b9\u4fbf\u627e\u5230\u8fd9\u4e9b\u903b\u8f91\u4e86\u3002"))),(0,i.kt)("h3",{id:"reducers-\u5e94\u8be5\u62e5\u6709-state-shape"},"Reducers \u5e94\u8be5\u62e5\u6709 State Shape"),(0,i.kt)("p",null,'Redux \u6839 state \u662f\u88ab\u5355\u4e00\u7684\u6839 reducer \u51fd\u6570\u6301\u6709\u548c\u8ba1\u7b97\u7684\u3002\u4ece\u53ef\u7ef4\u62a4\u6027\u7684\u89d2\u5ea6\uff0creducer \u4f1a\u88ab\u6309\u7167\u952e/\u503c\u5bf9\u7684\u5f62\u5f0f\u5212\u5206\u4e3a\u4e00\u4e2a\u4e2a "slice"\uff0c',(0,i.kt)("strong",{parentName:"p"},'\u6bcf\u4e2a "slice reducer" \u90fd\u8d1f\u8d23\u521d\u59cb\u5316\u503c\u4e14\u8ba1\u7b97\u548c\u66f4\u65b0 slice state \u503c'),"\u3002"),(0,i.kt)("p",null,"\u6b64\u5916\uff0cslice reducers should exercise control over what other values are returned as part of the calculated state. ",(0,i.kt)("strong",{parentName:"p"},'Minimize the use of "blind spreads/returns"')," like ",(0,i.kt)("inlineCode",{parentName:"p"},"return action.payload")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"return {...state, ...action.payload}"),", because those rely on the code that dispatched the action to correctly format the contents, and the reducer effectively gives up its ownership of what that state looks like. That can lead to bugs if the action contents are not correct."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note"),': A "spread return" reducer may be a reasonable choice for scenarios like editing data in a form, where writing a separate action type for each individual field would be time-consuming and of little benefit.')),(0,i.kt)(s.s,{mdxType:"DetailedExplanation"},'Picture a "current user" reducer that looks like:',(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const initialState = {\n    firstName: null,\n    lastName: null,\n    age: null,\n};\n\nexport default usersReducer = (state = initialState, action) {\n    switch(action.type) {\n        case "users/userLoggedIn": {\n            return action.payload;\n        }\n        default: return state;\n    }\n}\n')),(0,i.kt)("p",null,"In this example, the reducer completely assumes that ",(0,i.kt)("inlineCode",{parentName:"p"},"action.payload")," is going to be a correctly formatted object."),(0,i.kt)("p",null,'However, imagine if some part of the code were to dispatch a "todo" object inside the action, instead of a "user" object:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"dispatch({\n  type: 'users/userLoggedIn',\n  payload: {\n    id: 42,\n    text: 'Buy milk'\n  }\n})\n")),(0,i.kt)("p",null,"The reducer would blindly return the todo, and now the rest of the app would likely break when it tries to read the user from the store."),(0,i.kt)("p",null,"This could be at least partly fixed if the reducer has some validation checks to ensure that ",(0,i.kt)("inlineCode",{parentName:"p"},"action.payload")," actually has the right fields, or tries to read the right fields out by name. That does add more code, though, so it's a question of trading off more code for safety."),(0,i.kt)("p",null,"Use of static typing does make this kind of code safer and somewhat more acceptable. If the reducer knows that ",(0,i.kt)("inlineCode",{parentName:"p"},"action")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"PayloadAction<User>"),", then it ",(0,i.kt)("em",{parentName:"p"},"should")," be safe to do ",(0,i.kt)("inlineCode",{parentName:"p"},"return action.payload"),".")),(0,i.kt)("h3",{id:"name-state-slices-based-on-the-stored-data"},"Name State Slices Based On the Stored Data"),(0,i.kt)("p",null,"As mentioned in ",(0,i.kt)("a",{parentName:"p",href:"#reducers-should-own-the-state-shape"},"Reducers Should Own the State Shape "),', the standard approach for splitting reducer logic is based on "slices" of state. Correspondingly, ',(0,i.kt)("inlineCode",{parentName:"p"},"combineReducers")," is the standard function for joining those slice reducers into a larger reducer function."),(0,i.kt)("p",null,"The key names in the object passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"combineReducers"),' will define the names of the keys in the resulting state object. Be sure to name these keys after the data that is kept inside, and avoid use of the word "reducer" in the key names. Your object should look like ',(0,i.kt)("inlineCode",{parentName:"p"},"{users: {}, posts: {}}"),", rather than ",(0,i.kt)("inlineCode",{parentName:"p"},"{usersReducer: {}, postsReducer: {}}"),"."),(0,i.kt)(s.s,{mdxType:"DetailedExplanation"},"ES6 object literal shorthand makes it easy to define a key name and a value in an object at the same time:",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const data = 42\nconst obj = { data }\n// same as: {data: data}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"combineReducers")," accepts an object full of reducer functions, and uses that to generate state objects that have the same key names. This means that the key names in the functions object define the key names in the state object."),(0,i.kt)("p",null,'This results in a common mistake, where a reducer is imported using "reducer" in the variable name, and then passed to ',(0,i.kt)("inlineCode",{parentName:"p"},"combineReducers")," using the object literal shorthand:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import usersReducer from 'features/users/usersSlice'\n\nconst rootReducer = combineReducers({\n  usersReducer\n})\n")),(0,i.kt)("p",null,"In this case, use of the object literal shorthand created an object like ",(0,i.kt)("inlineCode",{parentName:"p"},"{usersReducer: usersReducer}"),'. So, "reducer" is now in the state key name. This is redundant and useless.'),(0,i.kt)("p",null,"Instead, define key names that only relate to the data inside. We suggest using explicit ",(0,i.kt)("inlineCode",{parentName:"p"},"key: value")," syntax for clarity:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import usersReducer from 'features/users/usersSlice'\nimport postsReducer from 'features/posts/postsSlice'\n\nconst rootReducer = combineReducers({\n  users: usersReducer,\n  posts: postsReducer\n})\n")),(0,i.kt)("p",null,"It's a bit more typing, but it results in the most understandable code and state definition.")),(0,i.kt)("h3",{id:"organize-state-structure-based-on-data-types-not-components"},"Organize State Structure Based on Data Types, Not Components"),(0,i.kt)("p",null,"Root state slices should be defined and named based on the major data types or areas of functionality in your application, not based on which specific components you have in your UI. This is because there is not a strict 1:1 correlation between data in the Redux store and components in the UI, and many components may need to access the same data. Think of the state tree as a sort of global database that any part of the app can access to read just the pieces of state needed in that component."),(0,i.kt)("p",null,"For example, a blogging app might need to track who is logged in, information on authors and posts, and perhaps some info on what screen is active. A good state structure might look like ",(0,i.kt)("inlineCode",{parentName:"p"},"{auth, posts, users, ui}"),". A bad structure would be something like ",(0,i.kt)("inlineCode",{parentName:"p"},"{loginScreen, usersList, postsList}"),"."),(0,i.kt)("h3",{id:"treat-reducers-as-state-machines"},"Treat Reducers as State Machines"),(0,i.kt)("p",null,'Many Redux reducers are written "unconditionally". They only look at the dispatched action and calculate a new state value, without basing any of the logic on what the current state might be. This can cause bugs, as some actions may not be "valid" conceptually at certain times depending on the rest of the app logic. For example, a "request succeeded" action should only have a new value calculated if the state says that it\'s already "loading", or an "update this item" action should only be dispatched if there is an item marked as "being edited".'),(0,i.kt)("p",null,"To fix this, ",(0,i.kt)("strong",{parentName:"p"},'treat reducers as "state machines", where the combination of both the current state ',(0,i.kt)("em",{parentName:"strong"},"and")," the dispatched action determines whether a new state value is actually calculated"),", not just the action itself unconditionally."),(0,i.kt)(s.s,{mdxType:"DetailedExplanation"},(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Finite-state_machine"},"finite state machine"),' is a useful way of modeling something that should only be in one of a finite number of "finite states" at any time. For example, if you have a ',(0,i.kt)("inlineCode",{parentName:"p"},"fetchUserReducer"),", the finite states can be:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"idle"')," (fetching not started yet)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"loading"')," (currently fetching the user)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"success"')," (user fetched successfully)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"failure"')," (user failed to fetch)")),(0,i.kt)("p",null,"To make these finite states clear and ",(0,i.kt)("a",{parentName:"p",href:"https://kentcdodds.com/blog/make-impossible-states-impossible"},"make impossible states impossible"),", you can specify a property that holds this finite state:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const initialUserState = {\n  status: 'idle', // explicit finite state\n  user: null,\n  error: null\n}\n")),(0,i.kt)("p",null,"With TypeScript, this also makes it easy to use ",(0,i.kt)("a",{parentName:"p",href:"https://basarat.gitbook.io/typescript/type-system/discriminated-unions"},"discriminated unions")," to represent each finite state. For instance, if ",(0,i.kt)("inlineCode",{parentName:"p"},"state.status === 'success'"),", then you would expect ",(0,i.kt)("inlineCode",{parentName:"p"},"state.user")," to be defined and wouldn't expect ",(0,i.kt)("inlineCode",{parentName:"p"},"state.error")," to be truthy. You can enforce this with types."),(0,i.kt)("p",null,'Typically, reducer logic is written by taking the action into account first. When modeling logic with state machines, it\'s important to take the state into account first. Creating "finite state reducers" for each state helps encapsulate behavior per state:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  FETCH_USER,\n  // ...\n} from './actions'\n\nconst IDLE_STATUS = 'idle';\nconst LOADING_STATUS = 'loading';\nconst SUCCESS_STATUS = 'success';\nconst FAILURE_STATUS = 'failure';\n\nconst fetchIdleUserReducer = (state, action) => {\n  // state.status is \"idle\"\n  switch (action.type) {\n    case FETCH_USER:\n      return {\n        ...state,\n        status: LOADING_STATUS\n      }\n    }\n    default:\n      return state;\n  }\n}\n\n// ... other reducers\n\nconst fetchUserReducer = (state, action) => {\n  switch (state.status) {\n    case IDLE_STATUS:\n      return fetchIdleUserReducer(state, action);\n    case LOADING_STATUS:\n      return fetchLoadingUserReducer(state, action);\n    case SUCCESS_STATUS:\n      return fetchSuccessUserReducer(state, action);\n    case FAILURE_STATUS:\n      return fetchFailureUserReducer(state, action);\n    default:\n      // this should never be reached\n      return state;\n  }\n}\n")),(0,i.kt)("p",null,"Now, since you're defining behavior per state instead of per action, you also prevent impossible transitions. For instance, a ",(0,i.kt)("inlineCode",{parentName:"p"},"FETCH_USER")," action should have no effect when ",(0,i.kt)("inlineCode",{parentName:"p"},"status === LOADING_STATUS"),", and you can enforce that, instead of accidentally introducing edge-cases.")),(0,i.kt)("h3",{id:"normalize-complex-nestedrelational-state"},"Normalize Complex Nested/Relational State"),(0,i.kt)("p",null,"Many applications need to cache complex data in the store. That data is often received in a nested form from an API, or has relations between different entities in the data (such as a blog that contains Users, Posts, and Comments)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prefer storing that data in ",(0,i.kt)("a",{parentName:"strong",href:"/usage/structuring-reducers/normalizing-state-shape"},'a "normalized" form')," in the store"),". This makes it easier to look up items based on their ID and update a single item in the store, and ultimately leads to better performance patterns."),(0,i.kt)("h3",{id:"keep-state-minimal-and-derive-additional-values"},"Keep State Minimal and Derive Additional Values"),(0,i.kt)("p",null,"Whenever possible, ",(0,i.kt)("strong",{parentName:"p"},"keep the actual data in the Redux store as minimal as possible, and ",(0,i.kt)("em",{parentName:"strong"},"derive")," additional values from that state as needed"),". This includes things like calculating filtered lists or summing up values. As an example, a todo app would keep an original list of todo objects in state, but derive a filtered list of todos outside the state whenever the state is updated. Similarly, a check for whether all todos have been completed, or number of todos remaining, can be calculated outside the store as well."),(0,i.kt)("p",null,"This has several benefits:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The actual state is easier to read"),(0,i.kt)("li",{parentName:"ul"},"Less logic is needed to calculate those additional values and keep them in sync with the rest of the data"),(0,i.kt)("li",{parentName:"ul"},"The original state is still there as a reference and isn't being replaced")),(0,i.kt)("p",null,'Deriving data is often done in "selector" functions, which can encapsulate the logic for doing the derived data calculations. In order to improve performance, these selectors can be ',(0,i.kt)("em",{parentName:"p"},"memoized")," to cache previous results, using libraries like ",(0,i.kt)("inlineCode",{parentName:"p"},"reselect")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"proxy-memoize"),"."),(0,i.kt)("h3",{id:"model-actions-as-events-not-setters"},"Model Actions as Events, Not Setters"),(0,i.kt)("p",null,"Redux does not care what the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"action.type")," field are - it just has to be defined. It is legal to write action types in present tense (",(0,i.kt)("inlineCode",{parentName:"p"},'"users/update"'),"), past tense (",(0,i.kt)("inlineCode",{parentName:"p"},'"users/updated"'),"), described as an event (",(0,i.kt)("inlineCode",{parentName:"p"},'"upload/progress"'),'), or treated as a "setter" (',(0,i.kt)("inlineCode",{parentName:"p"},'"users/setUserName"'),"). It is up to you to determine what a given action means in your application, and how you model those actions."),(0,i.kt)("p",null,"However, ",(0,i.kt)("strong",{parentName:"p"},'we recommend trying to treat actions more as "describing events that occurred", rather than "setters"'),'. Treating actions as "events" generally leads to more meaningful action names, fewer total actions being dispatched, and a more meaningful action log history. Writing "setters" often results in too many individual action types, too many dispatches, and an action log that is less meaningful.'),(0,i.kt)(s.s,{mdxType:"DetailedExplanation"},"Imagine you've got a restaurant app, and someone orders a pizza and a bottle of Coke.  You could dispatch an action like:",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{ type: "food/orderAdded",  payload: {pizza: 1, coke: 1} }\n')),(0,i.kt)("p",null,"Or you could dispatch:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n    type: "orders/setPizzasOrdered",\n    payload: {\n        amount: getState().orders.pizza + 1,\n    }\n}\n\n{\n    type: "orders/setCokesOrdered",\n    payload: {\n        amount: getState().orders.coke + 1,\n    }\n}\n')),(0,i.kt)("p",null,'The first example would be an "event". "Hey, someone ordered a pizza and a pop, deal with it somehow".'),(0,i.kt)("p",null,'The second example is a "setter". "I ',(0,i.kt)("em",{parentName:"p"},"know")," there are fields for 'pizzas ordered' and 'pops ordered', and I am commanding you to set their current values to these numbers\"."),(0,i.kt)("p",null,"The \"event\" approach only really needed a single action to be dispatched, and it's more flexible. It doesn't matter how many pizzas were already ordered. Maybe there's no cooks available, so the order gets ignored."),(0,i.kt)("p",null,'With the "setter" approach, the client code needed to know more about what the actual structure of the state is, what the "right" values should be, and ended up actually having to dispatch multiple actions to finish the "transaction".')),(0,i.kt)("h3",{id:"write-meaningful-action-names"},"Write Meaningful Action Names"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"action.type")," field serves two main purposes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reducer logic checks the action type to see if this action should be handled to calculate a new state"),(0,i.kt)("li",{parentName:"ul"},"Action types are shown in the Redux DevTools history log for you to read")),(0,i.kt)("p",null,"Per ",(0,i.kt)("a",{parentName:"p",href:"#model-actions-as-events-not-setters"},'Model Actions as "Events"'),", the actual contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," field do not matter to Redux itself. However, the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," value ",(0,i.kt)("em",{parentName:"p"},"does")," matter to you, the developer. ",(0,i.kt)("strong",{parentName:"p"},"Actions should be written with meaningful, informative, descriptive type fields"),". Ideally, you should be able to read through a list of dispatched action types, and have a good understanding of what happened in the application without even looking at the contents of each action. Avoid using very generic action names like ",(0,i.kt)("inlineCode",{parentName:"p"},'"SET_DATA"')," or ",(0,i.kt)("inlineCode",{parentName:"p"},'"UPDATE_STORE"'),", as they don't provide meaningful information on what happened."),(0,i.kt)("h3",{id:"allow-many-reducers-to-respond-to-the-same-action"},"Allow Many Reducers to Respond to the Same Action"),(0,i.kt)("p",null,"Redux reducer logic is intended to be split into many smaller reducers, each independently updating their own portion of the state tree, and all composed back together to form the root reducer function. When a given action is dispatched, it might be handled by all, some, or none of the reducers."),(0,i.kt)("p",null,"As part of this, you are encouraged to ",(0,i.kt)("strong",{parentName:"p"},"have many reducer functions all handle the same action separately"),' if possible. In practice, experience has shown that most actions are typically only handled by a single reducer function, which is fine. But, modeling actions as "events" and allowing many reducers to respond to those actions will typically allow your application\'s codebase to scale better, and minimize the number of times you need to dispatch multiple actions to accomplish one meaningful update.'),(0,i.kt)("h3",{id:"avoid-dispatching-many-actions-sequentially"},"Avoid Dispatching Many Actions Sequentially"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},'Avoid dispatching many actions in a row to accomplish a larger conceptual "transaction"'),'. This is legal, but will usually result in multiple relatively expensive UI updates, and some of the intermediate states could be potentially invalid by other parts of the application logic. Prefer dispatching a single "event"-type action that results in all of the appropriate state updates at once, or consider use of action batching addons to dispatch multiple actions with only a single UI update at the end.'),(0,i.kt)(s.s,{mdxType:"DetailedExplanation"},"There is no limit on how many actions you can dispatch in a row.  However, each dispatched action does result in execution of all store subscription callbacks (typically one or more per Redux-connected UI component), and will usually result in UI updates.",(0,i.kt)("p",null,"While UI updates queued from React event handlers will usually be batched into a single React render pass, updates queued ",(0,i.kt)("em",{parentName:"p"},"outside")," of those event handlers are not. This includes dispatches from most ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," functions, timeout callbacks, and non-React code. In those situations, each dispatch will result in a complete synchronous React render pass before the dispatch is done, which will decrease performance."),(0,i.kt)("p",null,'In addition, multiple dispatches that are conceptually part of a larger "transaction"-style update sequence will result in intermediate states that might not be considered valid. For example, if actions ',(0,i.kt)("inlineCode",{parentName:"p"},'"UPDATE_A"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"UPDATE_B"'),", and ",(0,i.kt)("inlineCode",{parentName:"p"},'"UPDATE_C"')," are dispatched in a row, and some code is expecting all three of ",(0,i.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"c")," to be updated together, the state after the first two dispatches will effectively be incomplete because only one or two of them has been updated."),(0,i.kt)("p",null,"If multiple dispatches are truly necessary, consider batching the updates in some way. Depending on your use case, this may just be batching React's own renders (possibly using ",(0,i.kt)("a",{parentName:"p",href:"https://react-redux.js.org/api/batch"},(0,i.kt)("inlineCode",{parentName:"a"},"batch()")," from React-Redux"),"), debouncing the store notification callbacks, or grouping many actions into a larger single dispatch that only results in one subscriber notification. See ",(0,i.kt)("a",{parentName:"p",href:"/faq/performance#how-can-i-reduce-the-number-of-store-update-events"},'the FAQ entry on "reducing store update events"')," for additional examples and links to related addons.")),(0,i.kt)("h3",{id:"evaluate-where-each-piece-of-state-should-live"},"Evaluate Where Each Piece of State Should Live"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/understanding/thinking-in-redux/three-principles"},'"Three Principles of Redux"'),' says that "the state of your whole application is stored in a single tree". This phrasing has been over-interpreted. It does not mean that literally ',(0,i.kt)("em",{parentName:"p"},"every")," value in the entire app ",(0,i.kt)("em",{parentName:"p"},"must")," be kept in the Redux store. Instead, ",(0,i.kt)("strong",{parentName:"p"},"there should be a single place to find all values that ",(0,i.kt)("em",{parentName:"strong"},"you")," consider to be global and app-wide"),'. Values that are "local" should generally be kept in the nearest UI component instead.'),(0,i.kt)("p",null,"Because of this, it is up to you as a developer to decide what state should actually live in the Redux store, and what should stay in component state. ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("a",{parentName:"strong",href:"/faq/organizing-state#do-i-have-to-put-all-my-state-into-redux-should-i-ever-use-reacts-setstate"},"Use these rules of thumb to help evaluate each piece of state and decide where it should live")),"."),(0,i.kt)("h3",{id:"use-the-react-redux-hooks-api"},"Use the React-Redux Hooks API"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prefer using ",(0,i.kt)("a",{parentName:"strong",href:"https://react-redux.js.org/api/hooks"},"the React-Redux hooks API (",(0,i.kt)("inlineCode",{parentName:"a"},"useSelector")," and ",(0,i.kt)("inlineCode",{parentName:"a"},"useDispatch"),")")," as the default way to interact with a Redux store from your React components"),". While the classic ",(0,i.kt)("inlineCode",{parentName:"p"},"connect")," API still works fine and will continue to be supported, the hooks API is generally easier to use in several ways. The hooks have less indirection, less code to write, and are simpler to use with TypeScript than ",(0,i.kt)("inlineCode",{parentName:"p"},"connect")," is."),(0,i.kt)("p",null,"The hooks API does introduce some different tradeoffs than ",(0,i.kt)("inlineCode",{parentName:"p"},"connect")," does in terms of performance and data flow, but we now recommend them as the default."),(0,i.kt)(s.s,{mdxType:"DetailedExplanation"},(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://react-redux.js.org/api/connect"},"classic ",(0,i.kt)("inlineCode",{parentName:"a"},"connect")," API")," is a ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/higher-order-components.html"},"Higher Order Component"),". It generates a new wrapper component that subscribes to the store, renders your own component, and passes down data from the store and action creators as props."),(0,i.kt)("p",null,'This is a deliberate level of indirection, and allows you to write "presentational"-style components that receive all their values as props, without being specifically dependent on Redux.'),(0,i.kt)("p",null,'The introduction of hooks has changed how most React developers write their components. While the "container/presentational" concept is still valid, hooks push you to write components that are responsible for requesting their own data internally by calling an appropriate hook. This leads to different approaches in how we write and test components and logic.'),(0,i.kt)("p",null,"The indirection of ",(0,i.kt)("inlineCode",{parentName:"p"},"connect")," has always made it a bit difficult for some users to follow the data flow. In addition, ",(0,i.kt)("inlineCode",{parentName:"p"},"connect"),"'s complexity has made it very difficult to type correctly with TypeScript, due to the multiple overloads, optional parameters, merging of props from ",(0,i.kt)("inlineCode",{parentName:"p"},"mapState")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"mapDispatch")," / parent component, and binding of action creators and thunks."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useSelector")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"useDispatch")," eliminate the indirection, so it's much more clear how your own component is interacting with Redux. Since ",(0,i.kt)("inlineCode",{parentName:"p"},"useSelector")," just accepts a single selector, it's much easier to define with TypeScript, and the same goes for ",(0,i.kt)("inlineCode",{parentName:"p"},"useDispatch"),"."),(0,i.kt)("p",null,"For more details, see Redux maintainer Mark Erikson's post and conference talk on the tradeoffs between hooks and HOCs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.isquaredsoftware.com/2019/07/blogged-answers-thoughts-on-hooks/"},"Thoughts on React Hooks, Redux, and Separation of Concerns")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://blog.isquaredsoftware.com/2019/09/presentation-hooks-hocs-tradeoffs/"},"ReactBoston 2019: Hooks, HOCs, and Tradeoffs"))),(0,i.kt)("p",null,"Also see the ",(0,i.kt)("a",{parentName:"p",href:"https://react-redux.js.org/api/hooks"},"React-Redux hooks API docs")," for info on how to correctly optimize components and handle rare edge cases.")),(0,i.kt)("h3",{id:"connect-more-components-to-read-data-from-the-store"},"Connect More Components to Read Data from the Store"),(0,i.kt)("p",null,"Prefer having more UI components subscribed to the Redux store and reading data at a more granular level. This typically leads to better UI performance, as fewer components will need to render when a given piece of state changes."),(0,i.kt)("p",null,"For example, rather than just connecting a ",(0,i.kt)("inlineCode",{parentName:"p"},"<UserList>")," component and reading the entire array of users, have ",(0,i.kt)("inlineCode",{parentName:"p"},"<UserList>")," retrieve a list of all user IDs, render list items as ",(0,i.kt)("inlineCode",{parentName:"p"},"<UserListItem userId={userId}>"),", and have ",(0,i.kt)("inlineCode",{parentName:"p"},"<UserListItem>")," be connected and extract its own user entry from the store."),(0,i.kt)("p",null,"This applies for both the React-Redux ",(0,i.kt)("inlineCode",{parentName:"p"},"connect()")," API and the ",(0,i.kt)("inlineCode",{parentName:"p"},"useSelector()")," hook."),(0,i.kt)("h3",{id:"use-the-object-shorthand-form-of-mapdispatch-with-connect"},"Use the Object Shorthand Form of ",(0,i.kt)("inlineCode",{parentName:"h3"},"mapDispatch")," with ",(0,i.kt)("inlineCode",{parentName:"h3"},"connect")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"mapDispatch")," argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"connect")," can be defined as either a function that receives ",(0,i.kt)("inlineCode",{parentName:"p"},"dispatch")," as an argument, or an object containing action creators. ",(0,i.kt)("strong",{parentName:"p"},"We recommend always using ",(0,i.kt)("a",{parentName:"strong",href:"https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object"},'the "object shorthand" form of ',(0,i.kt)("inlineCode",{parentName:"a"},"mapDispatch"))),", as it simplifies the code considerably. There is almost never a real need to write ",(0,i.kt)("inlineCode",{parentName:"p"},"mapDispatch")," as a function."),(0,i.kt)("h3",{id:"call-useselector-multiple-times-in-function-components"},"Call ",(0,i.kt)("inlineCode",{parentName:"h3"},"useSelector")," Multiple Times in Function Components"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"When retrieving data using the ",(0,i.kt)("inlineCode",{parentName:"strong"},"useSelector")," hook, prefer calling ",(0,i.kt)("inlineCode",{parentName:"strong"},"useSelector")," many times and retrieving smaller amounts of data, instead of having a single larger ",(0,i.kt)("inlineCode",{parentName:"strong"},"useSelector")," call that returns multiple results in an object"),". Unlike ",(0,i.kt)("inlineCode",{parentName:"p"},"mapState"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"useSelector")," is not required to return an object, and having selectors read smaller values means it is less likely that a given state change will cause this component to render."),(0,i.kt)("p",null,"However, try to find an appropriate balance of granularity. If a single component does need all fields in a slice of the state , just write one ",(0,i.kt)("inlineCode",{parentName:"p"},"useSelector")," that returns that whole slice instead of separate selectors for each individual field."),(0,i.kt)("h3",{id:"use-static-typing"},"Use Static Typing"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Use a static type system like TypeScript or Flow rather than plain JavaScript"),". The type systems will catch many common mistakes, improve the documentation of your code, and ultimately lead to better long-term maintainability. While Redux and React-Redux were originally designed with plain JS in mind, both work well with TS and Flow. Redux Toolkit is specifically written in TS and is designed to provide good type safety with a minimal amount of additional type declarations."),(0,i.kt)("h3",{id:"use-the-redux-devtools-extension-for-debugging"},"Use the Redux DevTools Extension for Debugging"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Configure your Redux store to enable ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/reduxjs/redux-devtools/tree/main/extension"},"debugging with the Redux DevTools Extension")),". It allows you to view:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The history log of dispatched actions"),(0,i.kt)("li",{parentName:"ul"},"The contents of each action"),(0,i.kt)("li",{parentName:"ul"},"The final state after an action was dispatched"),(0,i.kt)("li",{parentName:"ul"},"The diff in the state after an action"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/reduxjs/redux-devtools/blob/main/extension/docs/Features/Trace.md"},"function stack trace showing the code where the action was actually dispatched"))),(0,i.kt)("p",null,'In addition, the DevTools allows you to do "time-travel debugging", stepping back and forth in the action history to see the entire app state and UI at different points in time.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Redux was specifically designed to enable this kind of debugging, and the DevTools are one of the most powerful reasons to use Redux"),"."),(0,i.kt)("h3",{id:"use-plain-javascript-objects-for-state"},"Use Plain JavaScript Objects for State"),(0,i.kt)("p",null,"Prefer using plain JavaScript objects and arrays for your state tree, rather than specialized libraries like Immutable.js. While there are some potential benefits to using Immutable.js, most of the commonly stated goals such as easy reference comparisons are a property of immutable updates in general, and do not require a specific library. This also keeps bundle sizes smaller and reduces complexity from data type conversions."),(0,i.kt)("p",null,"As mentioned above, we specifically recommend using Immer if you want to simplify immutable update logic, specifically as part of Redux Toolkit."),(0,i.kt)(s.s,{mdxType:"DetailedExplanation"},"Immutable.js has been semi-frequently used in Redux apps since the beginning.  There are several common reasons stated for using Immutable.js:",(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Performance improvements from cheap reference comparisons"),(0,i.kt)("li",{parentName:"ul"},"Performance improvements from making updates thanks to specialized data structures"),(0,i.kt)("li",{parentName:"ul"},"Prevention of accidental mutations"),(0,i.kt)("li",{parentName:"ul"},"Easier nested updates via APIs like ",(0,i.kt)("inlineCode",{parentName:"li"},"setIn()"))),(0,i.kt)("p",null,"There are some valid aspects to those reasons, but in practice, the benefits aren't as good as stated, and there's multiple negatives to using it:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Cheap reference comparisons are a property of any immutable updates, not just Immutable.js"),(0,i.kt)("li",{parentName:"ul"},"Accidental mutations can be prevented via other mechanisms, such as using Immer (which eliminates accident-prone manual copying logic, and deep-freezes state in development by default) or ",(0,i.kt)("inlineCode",{parentName:"li"},"redux-immutable-state-invariant")," (which checks state for mutations)"),(0,i.kt)("li",{parentName:"ul"},"Immer allows simpler update logic overall, eliminating the need for ",(0,i.kt)("inlineCode",{parentName:"li"},"setIn()")),(0,i.kt)("li",{parentName:"ul"},"Immutable.js has a very large bundle size"),(0,i.kt)("li",{parentName:"ul"},"The API is fairly complex"),(0,i.kt)("li",{parentName:"ul"},"The API \"infects\" your application's code. All logic must know whether it's dealing with plain JS objects or Immutable objects"),(0,i.kt)("li",{parentName:"ul"},"Converting from Immutable objects to plain JS objects is relatively expensive, and always produces completely new deep object references"),(0,i.kt)("li",{parentName:"ul"},"Lack of ongoing maintenance to the library")),(0,i.kt)("p",null,"The strongest remaining reason to use Immutable.js is fast updates of ",(0,i.kt)("em",{parentName:"p"},"very")," large objects (tens of thousands of keys). Most applications won't deal with objects that large."),(0,i.kt)("p",null,"Overall, Immutable.js adds too much overhead for too little practical benefit. Immer is a much better option."))),(0,i.kt)("div",{class:"priority-rules priority-recommended"},(0,i.kt)("h2",{id:"priority-c-rules-recommended"},"Priority C Rules: Recommended"),(0,i.kt)("h3",{id:"write-action-types-as-domaineventname"},"Write Action Types as ",(0,i.kt)("inlineCode",{parentName:"h3"},"domain/eventName")),(0,i.kt)("p",null,'The original Redux docs and examples generally used a "SCREAMING_SNAKE_CASE" convention for defining action types, such as ',(0,i.kt)("inlineCode",{parentName:"p"},'"ADD_TODO"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"INCREMENT"'),". This matches typical conventions in most programming languages for declaring constant values. The downside is that the uppercase strings can be hard to read."),(0,i.kt)("p",null,'Other communities have adopted other conventions, usually with some indication of the "feature" or "domain" the action is related to, and the specific action type. The NgRx community typically uses a pattern like ',(0,i.kt)("inlineCode",{parentName:"p"},'"[Domain] Action Type"'),", such as ",(0,i.kt)("inlineCode",{parentName:"p"},'"[Login Page] Login"'),". Other patterns like ",(0,i.kt)("inlineCode",{parentName:"p"},'"domain:action"')," have been used as well."),(0,i.kt)("p",null,"Redux Toolkit's ",(0,i.kt)("inlineCode",{parentName:"p"},"createSlice")," function currently generates action types that look like ",(0,i.kt)("inlineCode",{parentName:"p"},'"domain/action"'),", such as ",(0,i.kt)("inlineCode",{parentName:"p"},'"todos/addTodo"'),". Going forward, ",(0,i.kt)("strong",{parentName:"p"},"we suggest using the ",(0,i.kt)("inlineCode",{parentName:"strong"},'"domain/action"')," convention for readability"),"."),(0,i.kt)("h3",{id:"write-actions-using-the-flux-standard-action-convention"},"Write Actions Using the Flux Standard Action Convention"),(0,i.kt)("p",null,'The original "Flux Architecture" documentation only specified that action objects should have a ',(0,i.kt)("inlineCode",{parentName:"p"},"type")," field, and did not give any further guidance on what kinds of fields or naming conventions should be used for fields in actions. To provide consistency, Andrew Clark created a convention called ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/redux-utilities/flux-standard-action"},'"Flux Standard Actions"')," early in Redux's development. Summarized, the FSA convention says that actions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Should always put their data into a ",(0,i.kt)("inlineCode",{parentName:"li"},"payload")," field"),(0,i.kt)("li",{parentName:"ul"},"May have a ",(0,i.kt)("inlineCode",{parentName:"li"},"meta")," field for additional info"),(0,i.kt)("li",{parentName:"ul"},"May have an ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," field to indicate the action represents a failure of some kind")),(0,i.kt)("p",null,"Many libraries in the Redux ecosystem have adopted the FSA convention, and Redux Toolkit generates action creators that match the FSA format."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prefer using FSA-formatted actions for consistency"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Note"),': The FSA spec says that "error" actions should set ',(0,i.kt)("inlineCode",{parentName:"p"},"error: true"),', and use the same action type as the "valid" form of the action. In practice, most developers write separate action types for the "success" and "error" cases. Either is acceptable.')),(0,i.kt)("h3",{id:"use-action-creators"},"Use Action Creators"),(0,i.kt)("p",null,'"Action creator" functions started with the original "Flux Architecture" approach. With Redux, action creators are not strictly required. Components and other logic can always call ',(0,i.kt)("inlineCode",{parentName:"p"},'dispatch({type: "some/action"})')," with the action object written inline."),(0,i.kt)("p",null,"However, using action creators provides consistency, especially in cases where some kind of preparation or additional logic is needed to fill in the contents of the action (such as generating a unique ID)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prefer using action creators for dispatching any actions"),". However, rather than writing action creators by hand, ",(0,i.kt)("strong",{parentName:"p"},"we recommend using the ",(0,i.kt)("inlineCode",{parentName:"strong"},"createSlice")," function from Redux Toolkit, which will generate action creators and action types automatically"),"."),(0,i.kt)("h3",{id:"use-thunks-for-async-logic"},"Use Thunks for Async Logic"),(0,i.kt)("p",null,"Redux was designed to be extensible, and the middleware API was specifically created to allow different forms of async logic to be plugged into the Redux store. That way, users wouldn't be forced to learn a specific library like RxJS if it wasn't appropriate for their needs."),(0,i.kt)("p",null,"This led to a wide variety of Redux async middleware addons being created, and that in turn has caused confusion and questions over which async middleware should be used."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"We recommend ",(0,i.kt)("a",{parentName:"strong",href:"https://github.com/reduxjs/redux-thunk"},"using the Redux Thunk middleware by default")),", as it is sufficient for most typical use cases (such as basic AJAX data fetching). In addition, use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"async/await")," syntax in thunks makes them easier to read."),(0,i.kt)("p",null,'If you have truly complex async workflows that involve things like cancellation, debouncing, running logic after a given action was dispatched, or "background-thread"-type behavior, then consider adding more powerful async middleware like Redux-Saga or Redux-Observable.'),(0,i.kt)("h3",{id:"move-complex-logic-outside-components"},"Move Complex Logic Outside Components"),(0,i.kt)("p",null,'We have traditionally suggested keeping as much logic as possible outside components. That was partly due to encouraging the "container/presentational" pattern, where many components simply accept data as props and display UI accordingly, but also because dealing with async logic in class component lifecycle methods can become difficult to maintain.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"We still encourage moving complex synchronous or async logic outside components, usually into thunks"),". This is especially true if the logic needs to read from the store state."),(0,i.kt)("p",null,"However, ",(0,i.kt)("strong",{parentName:"p"},"the use of React hooks does make it somewhat easier to manage logic like data fetching directly inside a component"),", and this may replace the need for thunks in some cases."),(0,i.kt)("h3",{id:"use-selector-functions-to-read-from-store-state"},"Use Selector Functions to Read from Store State"),(0,i.kt)("p",null,'"Selector functions" are a powerful tool for encapsulating reading values from the Redux store state and deriving further data from those values. In addition, libraries like Reselect enable creating memoized selector functions that only recalculate results when the inputs have changed, which is an important aspect of optimizing performance.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"We strongly recommend using memoized selector functions for reading store state whenever possible"),", and recommend creating those selectors with Reselect."),(0,i.kt)("p",null,"However, don't feel that you ",(0,i.kt)("em",{parentName:"p"},"must")," write selector functions for every field in your state. Find a reasonable balance for granularity, based on how often fields are accessed and updated, and how much actual benefit the selectors are providing in your application."),(0,i.kt)("h3",{id:"name-selector-functions-as-selectthing"},"Name Selector Functions as ",(0,i.kt)("inlineCode",{parentName:"h3"},"selectThing")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"We recommend prefixing selector function names with the word ",(0,i.kt)("inlineCode",{parentName:"strong"},"select")),", combined with a description of the value being selected. Examples of this would be ",(0,i.kt)("inlineCode",{parentName:"p"},"selectTodos"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"selectVisibleTodos"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"selectTodoById"),"."),(0,i.kt)("h3",{id:"avoid-putting-form-state-in-redux"},"Avoid Putting Form State In Redux"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Most form state shouldn't go in Redux"),". In most use cases, the data is not truly global, is not being cached, and is not being used by multiple components at once. In addition, connecting forms to Redux often involves dispatching actions on every single change event, which causes performance overhead and provides no real benefit. (You probably don't need to time-travel backwards one character from ",(0,i.kt)("inlineCode",{parentName:"p"},'name: "Mark"')," to ",(0,i.kt)("inlineCode",{parentName:"p"},'name: "Mar"'),".)"),(0,i.kt)("p",null,"Even if the data ultimately ends up in Redux, prefer keeping the form edits themselves in local component state, and only dispatching an action to update the Redux store once the user has completed the form."),(0,i.kt)("p",null,"There are use cases when keeping form state in Redux does actually make sense, such as WYSIWYG live previews of edited item attributes. But, in most cases, this isn't necessary."))))}h.isMDXComponent=!0}}]);