"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6609],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,h=p["".concat(c,".").concat(m)]||p[m]||l[m]||o;return n?r.createElement(h,s(s({ref:t},d),{},{components:n})):r.createElement(h,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6542:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return l}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={id:"beyond-combinereducers",title:"Beyond combineReducers",description:"Structuring Reducers > Beyond combineReducers: Examples of reducer logic for other use cases not handled by combineReducers",hide_title:!0},c=void 0,u={unversionedId:"usage/structuring-reducers/beyond-combinereducers",id:"usage/structuring-reducers/beyond-combinereducers",title:"Beyond combineReducers",description:"Structuring Reducers > Beyond combineReducers: Examples of reducer logic for other use cases not handled by combineReducers",source:"@site/../docs/usage/structuring-reducers/BeyondCombineReducers.md",sourceDirName:"usage/structuring-reducers",slug:"/usage/structuring-reducers/beyond-combinereducers",permalink:"/usage/structuring-reducers/beyond-combinereducers",draft:!1,tags:[],version:"current",frontMatter:{id:"beyond-combinereducers",title:"Beyond combineReducers",description:"Structuring Reducers > Beyond combineReducers: Examples of reducer logic for other use cases not handled by combineReducers",hide_title:!0}},d={},l=[{value:"Sharing data between slice reducers",id:"sharing-data-between-slice-reducers",level:2},{value:"Further Suggestions",id:"further-suggestions",level:2}],p={toc:l};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"beyond-combinereducers"},"Beyond ",(0,o.kt)("inlineCode",{parentName:"h1"},"combineReducers")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"combineReducers")," utility included with Redux is very useful, but is deliberately limited to handle a single common use case: updating a state tree that is a plain Javascript object, by delegating the work of updating each slice of state to a specific slice reducer. It does ",(0,o.kt)("em",{parentName:"p"},"not"),' handle other use cases, such as a state tree made up of Immutable.js Maps, trying to pass other portions of the state tree as an additional argument to a slice reducer, or performing "ordering" of slice reducer calls. It also does not care how a given slice reducer does its work.'),(0,o.kt)("p",null,'The common question, then, is "How can I use ',(0,o.kt)("inlineCode",{parentName:"p"},"combineReducers"),' to handle these other use cases?". The answer to that is simply: "you don\'t - you probably need to use something else". ',(0,o.kt)("strong",{parentName:"p"},"Once you go past the core use case for ",(0,o.kt)("inlineCode",{parentName:"strong"},"combineReducers"),', it\'s time to use more "custom" reducer logic'),", whether it be specific logic for a one-off use case, or a reusable function that could be widely shared. Here's some suggestions for dealing with a couple of these typical use cases, but feel free to come up with your own approaches."),(0,o.kt)("h2",{id:"sharing-data-between-slice-reducers"},"Sharing data between slice reducers"),(0,o.kt)("p",null,"Similarly, if ",(0,o.kt)("inlineCode",{parentName:"p"},"sliceReducerA")," happens to need some data from ",(0,o.kt)("inlineCode",{parentName:"p"},"sliceReducerB"),"'s slice of state in order to handle a particular action, or ",(0,o.kt)("inlineCode",{parentName:"p"},"sliceReducerB")," happens to need the entire state as an argument, ",(0,o.kt)("inlineCode",{parentName:"p"},"combineReducers")," does not handle that itself. This could be resolved by writing a custom function that knows to pass the needed data as an additional argument in those specific cases, such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function combinedReducer(state, action) {\n  switch (action.type) {\n    case 'A_TYPICAL_ACTION': {\n      return {\n        a: sliceReducerA(state.a, action),\n        b: sliceReducerB(state.b, action)\n      }\n    }\n    case 'SOME_SPECIAL_ACTION': {\n      return {\n        // specifically pass state.b as an additional argument\n        a: sliceReducerA(state.a, action, state.b),\n        b: sliceReducerB(state.b, action)\n      }\n    }\n    case 'ANOTHER_SPECIAL_ACTION': {\n      return {\n        a: sliceReducerA(state.a, action),\n        // specifically pass the entire state as an additional argument\n        b: sliceReducerB(state.b, action, state)\n      }\n    }\n    default:\n      return state\n  }\n}\n")),(0,o.kt)("p",null,'Another alternative to the "shared-slice updates" issue would be to simply put more data into the action. This is easily accomplished using thunk functions or a similar approach, per this example:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function someSpecialActionCreator() {\n  return (dispatch, getState) => {\n    const state = getState()\n    const dataFromB = selectImportantDataFromB(state)\n\n    dispatch({\n      type: 'SOME_SPECIAL_ACTION',\n      payload: {\n        dataFromB\n      }\n    })\n  }\n}\n")),(0,o.kt)("p",null,"Because the data from B's slice is already in the action, the parent reducer doesn't have to do anything special to make that data available to ",(0,o.kt)("inlineCode",{parentName:"p"},"sliceReducerA"),"."),(0,o.kt)("p",null,"A third approach would be to use the reducer generated by ",(0,o.kt)("inlineCode",{parentName:"p"},"combineReducers"),' to handle the "simple" cases where each slice reducer can update itself independently, but also use another reducer to handle the "special" cases where data needs to be shared across slices. Then, a wrapping function could call both of those reducers in turn to generate the final result:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const combinedReducer = combineReducers({\n  a: sliceReducerA,\n  b: sliceReducerB\n})\n\nfunction crossSliceReducer(state, action) {\n  switch (action.type) {\n    case 'SOME_SPECIAL_ACTION': {\n      return {\n        // specifically pass state.b as an additional argument\n        a: handleSpecialCaseForA(state.a, action, state.b),\n        b: sliceReducerB(state.b, action)\n      }\n    }\n    default:\n      return state\n  }\n}\n\nfunction rootReducer(state, action) {\n  const intermediateState = combinedReducer(state, action)\n  const finalState = crossSliceReducer(intermediateState, action)\n  return finalState\n}\n")),(0,o.kt)("p",null,"As it turns out, there's a useful utility called ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/acdlite/reduce-reducers"},"reduce-reducers")," that can make that process easier. It simply takes multiple reducers and runs ",(0,o.kt)("inlineCode",{parentName:"p"},"reduce()")," on them, passing the intermediate state values to the next reducer in line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Same as the "manual" rootReducer above\nconst rootReducer = reduceReducers(combinedReducers, crossSliceReducer)\n')),(0,o.kt)("p",null,"Note that if you use ",(0,o.kt)("inlineCode",{parentName:"p"},"reduceReducers"),", you should make sure that the first reducer in the list is able to define the initial state, since the later reducers will generally assume that the entire state already exists and not try to provide defaults."),(0,o.kt)("h2",{id:"further-suggestions"},"Further Suggestions"),(0,o.kt)("p",null,"Again, it's important to understand that Redux reducers are ",(0,o.kt)("em",{parentName:"p"},"just")," functions. While ",(0,o.kt)("inlineCode",{parentName:"p"},"combineReducers")," is useful, it's just one tool in the toolbox. Functions can contain conditional logic other than switch statements, functions can be composed to wrap each other, and functions can call other functions. Maybe you need one of your slice reducers to be able to reset its state, and to only respond to specific actions overall. You could do:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const undoableFilteredSliceA = compose(\n  undoReducer,\n  filterReducer('ACTION_1', 'ACTION_2'),\n  sliceReducerA\n)\nconst rootReducer = combineReducers({\n  a: undoableFilteredSliceA,\n  b: normalSliceReducerB\n})\n")),(0,o.kt)("p",null,"Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"combineReducers")," doesn't know or care that there's anything special about the reducer function that's responsible for managing ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),". We didn't need to modify ",(0,o.kt)("inlineCode",{parentName:"p"},"combineReducers")," to specifically know how to undo things - we just built up the pieces we needed into a new composed function."),(0,o.kt)("p",null,"Also, while ",(0,o.kt)("inlineCode",{parentName:"p"},"combineReducers")," is the one reducer utility function that's built into Redux, there's a wide variety of third-party reducer utilities that have published for reuse. The ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/markerikson/redux-ecosystem-links"},"Redux Addons Catalog")," lists many of the third-party utilities that are available. Or, if none of the published utilities solve your use case, you can always write a function yourself that does just exactly what you need."))}m.isMDXComponent=!0}}]);